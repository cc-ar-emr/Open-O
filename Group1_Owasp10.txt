                     
                     
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 309 Code Findings ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                                                      
  [36m[22m[24m  src/main/java/org/caisi/core/web/Infirm2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          407‚îÜ request.getSession().setAttribute("signOnNote", onsig);
            ‚ãÆ‚îÜ----------------------------------------
          414‚îÜ request.getSession().setAttribute("case_program_id", String.valueOf(pid));
            ‚ãÆ‚îÜ----------------------------------------
          428‚îÜ request.getSession().setAttribute("signOnNote", onsig);
   
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
          463‚îÜ out.print(String.format("<option value='%s'>%s</option>", pb.getValue(), pb.getLabel()));
                                                                             
  [36m[22m[24m  src/main/java/org/caisi/core/web/SystemMessage2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
           77‚îÜ request.getSession().setAttribute("systemMessageId", messageId);
                                                                                
  [36m[22m[24m  src/main/java/org/caisi/tickler/web/UnreadTickler2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          141‚îÜ request.getSession().setAttribute("user", strAuth[0]);
                                                                                                      
  [36m[22m[24m  src/main/java/org/oscarehr/PMmodule/caisi_integrator/CaisiIntegratorUpdateTask.java[0m
    ‚ùØ‚ù± java.lang.security.audit.crypto.use-of-md5.use-of-md5
          Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use HMAC instead.                         
          Details: https://sg.run/ryJn                                                                   
                                                                                                         
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ "SHA-512"
          2416‚îÜ MessageDigest md5Digest = MessageDigest.getInstance("MD5");
            ‚ãÆ‚îÜ----------------------------------------
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ "SHA-512"
          2490‚îÜ checksum = getFileChecksum(MessageDigest.getInstance("MD5"), destination.toFile());
                                                                                           
  [36m[22m[24m  src/main/java/org/oscarehr/PMmodule/exporter/AbstractIntakeExporter.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-
       disallow-doctype-decl-missing                                                                            
          DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external
          entity attacks. Disable this by setting the feature "http://apache.org/xml/features/disallow-       
          doctype-decl" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities
          declarations. This can be done by setting the features "http://xml.org/sax/features/external-       
          general-entities" and "http://xml.org/sax/features/external-parameter-entities" to false.           
          Details: https://sg.run/PYBz                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              factory.newDocumentBuilder();                                                               
          114‚îÜ builder = factory.newDocumentBuilder();
                                                                                         
  [36m[22m[24m  src/main/java/org/oscarehr/PMmodule/exporter/DATISExporterServlet.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
           69‚îÜ dir = new File(dirLocation + File.separatorChar + sessionId);
                                                                                
  [36m[22m[24m  src/main/java/org/oscarehr/PMmodule/exporter/TestServlet.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
           89‚îÜ response.getWriter().print(exporter.export());
                                                                                           
  [36m[22m[24m  src/main/java/org/oscarehr/PMmodule/utility/MigrateStaffAssignments.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.formatted-sql-string.formatted-sql-string
          Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the
          SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement)    
          instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.                    
          Details: https://sg.run/OPXp                                                                        
                                                                                                              
           90‚îÜ stmt.execute("SELECT * FROM caisi_role where name = '" + name + "'");
                                                                                    
  [36m[22m[24m  src/main/java/org/oscarehr/PMmodule/web/ClientManager2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          381‚îÜ request.getSession().setAttribute("clientGender", demographic.getSex());
            ‚ãÆ‚îÜ----------------------------------------
          382‚îÜ request.getSession().setAttribute("clientAge", demographic.getAge());
            ‚ãÆ‚îÜ----------------------------------------
          383‚îÜ request.getSession().setAttribute("demographicId", demographic.getDemographicNo());
                                                                                          
  [36m[22m[24m  src/main/java/org/oscarehr/PMmodule/web/ClientSearchAction22Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          105‚îÜ request.getSession().setAttribute("noteId", noteId);
                                                                                               
  [36m[22m[24m  src/main/java/org/oscarehr/PMmodule/web/admin/ProgramManagerView2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          121‚îÜ request.getSession().setAttribute("case_program_id", programId);
            ‚ãÆ‚îÜ----------------------------------------
          426‚îÜ request.getSession().setAttribute("programId", programId);
            ‚ãÆ‚îÜ----------------------------------------
          427‚îÜ request.getSession().setAttribute("admission.dischargeNotes", dischargeNotes);
            ‚ãÆ‚îÜ----------------------------------------
          428‚îÜ request.getSession().setAttribute("admission.admissionNotes", admissionNotes);
                                                                                          
  [36m[22m[24m  src/main/java/org/oscarehr/PMmodule/web/forms/SurveyExecute2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          181‚îÜ request.getSession().setAttribute("formInstanceId", formInstanceId);
            ‚ãÆ‚îÜ----------------------------------------
          220‚îÜ request.getSession().setAttribute("validation_file", descr);
            ‚ãÆ‚îÜ----------------------------------------
          231‚îÜ request.getSession().setAttribute("model", model);
                                                                                              
  [36m[22m[24m  src/main/java/org/oscarehr/admin/traceability/GenerateTraceabilityUtil.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
           63‚îÜ File f_ = iterator.next();
            ‚ãÆ‚îÜ----------------------------------------
           64‚îÜ FileInputStream fi_ = new FileInputStream(f_);
                                                                                  
  [36m[22m[24m  src/main/java/org/oscarehr/appointment/search/SearchConfig.java[0m
    ‚ùØ‚ù± java.lang.security.audit.crypto.use-of-default-aes.use-of-default-aes
          Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't     
          provide message confidentiality and is not semantically secure so should not be used. Instead, use a
          strong, secure cipher: java.crypto.Cipher.getInstance("AES/CBC/PKCS7PADDING"). See                  
          https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.       
          Details: https://sg.run/nzKO                                                                        
                                                                                                              
          619‚îÜ Cipher cipher = Cipher.getInstance("AES");
            ‚ãÆ‚îÜ----------------------------------------
          633‚îÜ Cipher cipher = Cipher.getInstance("AES");
                                                                                         
  [36m[22m[24m  src/main/java/org/oscarehr/casemgmt/dao/CaseManagementNoteDAOImpl.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.formatted-sql-string.formatted-sql-string
          Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the
          SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement)    
          instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.                    
          Details: https://sg.run/OPXp                                                                        
                                                                                                              
          698‚îÜ ResultSet rs = ps.executeQuery(sql);
                                                                                    
  [36m[22m[24m  src/main/java/org/oscarehr/casemgmt/service/MeasurementPrint.java[0m
    ‚ùØ‚ù± java.lang.security.audit.crlf-injection-logs.crlf-injection-logs
          When data from an untrusted source is put into a logger and not neutralized correctly, an attacker
          could forge log entries or include malicious content.                                             
          Details: https://sg.run/wek0                                                                      
                                                                                                            
           55‚îÜ String startDate = request.getParameter("pStartDate");
           56‚îÜ String endDate = request.getParameter("pEndDate");
           57‚îÜ String demographicNo = request.getParameter("demographicNo");
           58‚îÜ
           59‚îÜ logger.info("startDate = " + startDate);
            ‚ãÆ‚îÜ----------------------------------------
           56‚îÜ String endDate = request.getParameter("pEndDate");
           57‚îÜ String demographicNo = request.getParameter("demographicNo");
           58‚îÜ
           59‚îÜ logger.info("startDate = " + startDate);
           60‚îÜ logger.info("endDate = " + endDate);
            ‚ãÆ‚îÜ----------------------------------------
           57‚îÜ String demographicNo = request.getParameter("demographicNo");
           58‚îÜ
           59‚îÜ logger.info("startDate = " + startDate);
           60‚îÜ logger.info("endDate = " + endDate);
           61‚îÜ logger.info("demographicNo = " + demographicNo);
                                                                                          
  [36m[22m[24m  src/main/java/org/oscarehr/casemgmt/web/CaseManagementEntry2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          532‚îÜ request.getSession().setAttribute("casemgmtNoteLock" + demoNo, casemgmtNoteLock);
   
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
          1146‚îÜ response.getWriter().println(note.getId());
            ‚ãÆ‚îÜ----------------------------------------
          2793‚îÜ out.println(textStr);
                                                                                         
  [36m[22m[24m  src/main/java/org/oscarehr/casemgmt/web/CaseManagementView2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          2143‚îÜ request.getSession().setAttribute("casemgmt_DemoNo", demono);
                                                                             
  [36m[22m[24m  src/main/java/org/oscarehr/common/dao/CaseloadDaoImpl.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.formatted-sql-string.formatted-sql-string
          Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the
          SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement)    
          instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.                    
          Details: https://sg.run/OPXp                                                                        
                                                                                                              
          246‚îÜ Query q = entityManager.createNativeQuery(query);
            ‚ãÆ‚îÜ----------------------------------------
          300‚îÜ Query q = entityManager.createNativeQuery(query);
                                                                                 
  [36m[22m[24m  src/main/java/org/oscarehr/common/dao/InboxResultsDaoImpl.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.formatted-sql-string.formatted-sql-string
          Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the
          SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement)    
          instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.                    
          Details: https://sg.run/OPXp                                                                        
                                                                                                              
           70‚îÜ Query q = entityManager.createNativeQuery(attachQuery);
            ‚ãÆ‚îÜ----------------------------------------
           82‚îÜ q = entityManager.createNativeQuery(sql);
            ‚ãÆ‚îÜ----------------------------------------
          117‚îÜ Query q = entityManager.createNativeQuery(sql);
                                                                                        
  [36m[22m[24m  src/main/java/org/oscarehr/common/dao/InboxResultsRepositoryImpl.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.formatted-sql-string.formatted-sql-string
          Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the
          SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement)    
          instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.                    
          Details: https://sg.run/OPXp                                                                        
                                                                                                              
          145‚îÜ query = entityManager.createNativeQuery(sql, InboxItem.class);
            ‚ãÆ‚îÜ----------------------------------------
          153‚îÜ query = entityManager.createNativeQuery(sql, InboxResponse.class);
            ‚ãÆ‚îÜ----------------------------------------
          159‚îÜ query = entityManager.createNativeQuery(sql, InboxItemDemographicCount.class);
                                                                                             
  [36m[22m[24m  src/main/java/org/oscarehr/common/dao/RemoteIntegratedDataCopyDaoImpl.java[0m
    ‚ùØ‚ù± java.lang.security.audit.crypto.use-of-sha1.use-of-sha1
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or 
          SHA256 or SHA512 for other hash function applications.                                           
          Details: https://sg.run/bXNp                                                                     
                                                                                                           
          131‚îÜ MessageDigest md = MessageDigest.getInstance("SHA-1");
                                                                                           
  [36m[22m[24m  src/main/java/org/oscarehr/common/hl7/v2/EmeraldHL7A04TransportTask.java[0m
    ‚ùØ‚ù± java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket
          Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an
          attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or     
          'SSLServerSocketFactory' instead.                                                                
          Details: https://sg.run/W8zA                                                                     
                                                                                                           
          105‚îÜ Socket client = new Socket(sendAddr, sendPort);
                                                                                            
  [36m[22m[24m  src/main/java/org/oscarehr/common/hl7/v2/oscar_to_oscar/SendingUtils.java[0m
    ‚ùØ‚ù± java.lang.security.audit.weak-ssl-context.weak-ssl-context
          An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered
          weak encryption and are deprecated. Use SSLContext.getInstance("TLSv1.2") for the best security.
          Details: https://sg.run/4x7E                                                                    
                                                                                                          
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ SSLContext.getInstance("TLSv1.2")
          130‚îÜ SSLContext sslContext = SSLContext.getInstance("TLS");
   
    ‚ùØ‚ù± java.lang.security.audit.crypto.ecb-cipher.ecb-cipher
          Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which
          allows an attacker to intercept and replay the data. Further, ECB mode does not provide any         
          integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.                  
          Details: https://sg.run/Ro9K                                                                        
                                                                                                              
          150‚îÜ Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
   
    ‚ùØ‚ù± java.lang.security.audit.crypto.use-of-default-aes.use-of-default-aes
          Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't     
          provide message confidentiality and is not semantically secure so should not be used. Instead, use a
          strong, secure cipher: java.crypto.Cipher.getInstance("AES/CBC/PKCS7PADDING"). See                  
          https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.       
          Details: https://sg.run/nzKO                                                                        
                                                                                                              
          157‚îÜ Cipher cipher = Cipher.getInstance("AES");
                                                                                   
  [36m[22m[24m  src/main/java/org/oscarehr/common/web/BillingInvoice2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
          103‚îÜ if (fos != null) fos.close();
                                                                                    
  [36m[22m[24m  src/main/java/org/oscarehr/common/web/BillingONReview2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
           75‚îÜ response.getOutputStream().write(json.toString().getBytes());
                                                                                          
  [36m[22m[24m  src/main/java/org/oscarehr/common/web/DemographicExtService2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
           90‚îÜ response.getWriter().println(json);
                                                                                     
  [36m[22m[24m  src/main/java/org/oscarehr/common/web/DxresearchReport2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
           99‚îÜ request.getSession().setAttribute("listview", patientInfo);
            ‚ãÆ‚îÜ----------------------------------------
          103‚îÜ request.getSession().setAttribute("Counter", patientInfo.size());
            ‚ãÆ‚îÜ----------------------------------------
          156‚îÜ request.getSession().setAttribute("listview", patientInfo);
            ‚ãÆ‚îÜ----------------------------------------
          160‚îÜ request.getSession().setAttribute("Counter", patientInfo.size());
            ‚ãÆ‚îÜ----------------------------------------
          187‚îÜ request.getSession().setAttribute("listview", patientInfo);
            ‚ãÆ‚îÜ----------------------------------------
          191‚îÜ request.getSession().setAttribute("Counter", patientInfo.size());
            ‚ãÆ‚îÜ----------------------------------------
          208‚îÜ request.getSession().setAttribute("listview", patientInfo);
            ‚ãÆ‚îÜ----------------------------------------
          212‚îÜ request.getSession().setAttribute("Counter", patientInfo.size());
            ‚ãÆ‚îÜ----------------------------------------
          229‚îÜ request.getSession().setAttribute("listview", patientInfo);
            ‚ãÆ‚îÜ----------------------------------------
          233‚îÜ request.getSession().setAttribute("Counter", patientInfo.size());
            ‚ãÆ‚îÜ----------------------------------------
          246‚îÜ request.getSession().setAttribute("editingCodeDesc", editingCodeDesc);
                                                                              
  [36m[22m[24m  src/main/java/org/oscarehr/common/web/Pregnancy2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
           87‚îÜ response.getWriter().println(json);
   
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          224‚îÜ request.getSession().setAttribute("labReq07" + demographicNo, p);
            ‚ãÆ‚îÜ----------------------------------------
          235‚îÜ request.getSession().setAttribute("labReq10" + demographicNo, p);
            ‚ãÆ‚îÜ----------------------------------------
          260‚îÜ request.getSession().setAttribute("labReq07" + demographicNo, p);
            ‚ãÆ‚îÜ----------------------------------------
          273‚îÜ request.getSession().setAttribute("labReq10" + demographicNo, p);
   
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
          389‚îÜ response.getWriter().print(jsonObj.toString());
            ‚ãÆ‚îÜ----------------------------------------
          402‚îÜ response.getWriter().print(json.toString());
   
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          534‚îÜ request.getSession().setAttribute("labReq07" + demographicNo, p);
            ‚ãÆ‚îÜ----------------------------------------
          553‚îÜ request.getSession().setAttribute("labReq10" + demographicNo, p);
            ‚ãÆ‚îÜ----------------------------------------
          573‚îÜ request.getSession().setAttribute("labReq07" + demographicNo, p);
            ‚ãÆ‚îÜ----------------------------------------
          582‚îÜ request.getSession().setAttribute("labReq10" + demographicNo, p);
   
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
          913‚îÜ File file = new File(request.getSession().getServletContext().getRealPath("/") + "WEB-
               INF/classes/oscar/form/prop/fundal_graph.png");                                       
   
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
          987‚îÜ response.getWriter().print(json.toString());
                                                                                       
  [36m[22m[24m  src/main/java/org/oscarehr/dashboard/admin/ExportResults2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
           86‚îÜ outputStream.write(csvFile.getBytes());
                                                                                         
  [36m[22m[24m  src/main/java/org/oscarehr/dashboard/admin/ManageDashboard2Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-
       decl-missing                                                                                                  
          DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external      
          entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-       
          doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities
          declarations. This can be done by setting the features `http://xml.org/sax/features/external-       
          general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The
          previous links are not meant to be clicked. They are the literal config key values that are supposed
          to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-     
          sheets/java-xxe/#3a-documentbuilderfactory.                                                         
          Details: https://sg.run/Gj32                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              factory.newSAXParser();                                                                     
          120‚îÜ SAXParser parser = factory.newSAXParser();
   
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
          192‚îÜ outputStream.write(xmlTemplate.getBytes());
                                                                                             
  [36m[22m[24m  src/main/java/org/oscarehr/dashboard/handler/IndicatorTemplateHandler.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-
       disallow-doctype-decl-missing                                                                            
          DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external
          entity attacks. Disable this by setting the feature "http://apache.org/xml/features/disallow-       
          doctype-decl" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities
          declarations. This can be done by setting the features "http://xml.org/sax/features/external-       
          general-entities" and "http://xml.org/sax/features/external-parameter-entities" to false.           
          Details: https://sg.run/PYBz                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              factory.newDocumentBuilder();                                                               
          259‚îÜ DocumentBuilder builder = factory.newDocumentBuilder();
                                                                                         
  [36m[22m[24m  src/main/java/org/oscarehr/decisionSupport/web/TestActionW2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
           61‚îÜ response.getWriter().println(dsService.evaluateAndGetConsequences(loggedInInfo,
               demographic_no, (String) request.getSession().getAttribute("user")));          
                                                                                                 
  [36m[22m[24m  src/main/java/org/oscarehr/documentManager/actions/AddEditDocument2Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
          120‚îÜ File file = writeLocalFile(Files.newInputStream(form.getDocFile().toPath()), fileName);//
               write file to local dir                                                                  
   
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          153‚îÜ request.getSession().setAttribute("preferredQueue", queueId);
                                                                                                 
  [36m[22m[24m  src/main/java/org/oscarehr/documentManager/actions/DocumentPreview2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
          123‚îÜ outs.write(data);
                                                                                                
  [36m[22m[24m  src/main/java/org/oscarehr/documentManager/actions/DocumentUpload2Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
           85‚îÜ File f = new File(IncomingDocUtil.getAndCreateIncomingDocumentFilePathName(queueId,
               destFolder, fileName));                                                            
   
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
           99‚îÜ request.getSession().setAttribute("preferredQueue", queueId);
            ‚ãÆ‚îÜ----------------------------------------
          157‚îÜ request.getSession().setAttribute("preferredQueue", queueId);
                                                                                                
  [36m[22m[24m  src/main/java/org/oscarehr/documentManager/actions/ManageDocument2Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
          548‚îÜ File outfile = hasCacheVersion(d, pageNum);
            ‚ãÆ‚îÜ----------------------------------------
          593‚îÜ File outfile = hasCacheVersion2(d, pn);
            ‚ãÆ‚îÜ----------------------------------------
          629‚îÜ File file = new File(documentDir, d.getDocfilename());
   
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
          704‚îÜ outs.write(contentBytes);
            ‚ãÆ‚îÜ----------------------------------------
          821‚îÜ outs.write(contentBytes);
            ‚ãÆ‚îÜ----------------------------------------
          866‚îÜ out.println(annotation);
            ‚ãÆ‚îÜ----------------------------------------
          869‚îÜ out.println(tickler + "<br>");
            ‚ãÆ‚îÜ----------------------------------------
          872‚îÜ out.println(acknowledgement + "<br>");
            ‚ãÆ‚îÜ----------------------------------------
          879‚îÜ out.println("<br>" + props.getString("dms.documentBrowser.DocumentUpdated") + ": " +
               curDoc.getDateTimeStamp());                                                         
            ‚ãÆ‚îÜ----------------------------------------
          880‚îÜ out.println("<br>" + props.getString("dms.documentBrowser.ContentUpdated") + ": " +
               curDoc.getContentDateTime());                                                      
            ‚ãÆ‚îÜ----------------------------------------
          881‚îÜ out.println("<br>" + props.getString("dms.documentBrowser.ObservationDate") + ": " +
               curDoc.getObservationDate());                                                       
            ‚ãÆ‚îÜ----------------------------------------
          882‚îÜ out.println("<br>" + props.getString("dms.documentBrowser.Type") + ": " +
               curDoc.getType());                                                       
            ‚ãÆ‚îÜ----------------------------------------
          883‚îÜ out.println("<br>" + props.getString("dms.documentBrowser.Class") + ": " +
               curDoc.getDocClass());                                                    
            ‚ãÆ‚îÜ----------------------------------------
          884‚îÜ out.println("<br>" + props.getString("dms.documentBrowser.Subclass") + ": " +
               curDoc.getDocSubClass());                                                    
            ‚ãÆ‚îÜ----------------------------------------
          885‚îÜ out.println("<br>" + props.getString("dms.documentBrowser.Description") + ": " +
               curDoc.getDescription());                                                       
            ‚ãÆ‚îÜ----------------------------------------
          886‚îÜ out.println("<br>" + props.getString("dms.documentBrowser.Creator") + ": " +
               curDoc.getCreatorName());                                                   
            ‚ãÆ‚îÜ----------------------------------------
          887‚îÜ out.println("<br>" + props.getString("dms.documentBrowser.Responsible") + ": " +
               curDoc.getResponsibleName());                                                   
            ‚ãÆ‚îÜ----------------------------------------
          888‚îÜ out.println("<br>" + props.getString("dms.documentBrowser.Reviewer") + ": " +
               curDoc.getReviewerName());                                                   
            ‚ãÆ‚îÜ----------------------------------------
          889‚îÜ out.println("<br>" + props.getString("dms.documentBrowser.Source") + ": " +
               curDoc.getSource());                                                       
   
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
          949‚îÜ File f1 = new File(sourceFilePath);
   
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
          1038‚îÜ response.getWriter().print(props.getString("dms.incomingDocs.errorInOpening") + pdfName);
   
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
          1079‚îÜ File file = new File(filePath);
            ‚ãÆ‚îÜ----------------------------------------
          1090‚îÜ bfis = new BufferedInputStream(new FileInputStream(file));
            ‚ãÆ‚îÜ----------------------------------------
          1125‚îÜ File outfile = createIncomingCacheVersion(queueId, pdfDir, pdfName, pn);
            ‚ãÆ‚îÜ----------------------------------------
          1129‚îÜ bfis = new BufferedInputStream(new FileInputStream(outfile));
                                                                                               
  [36m[22m[24m  src/main/java/org/oscarehr/documentManager/actions/SplitDocument2Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
           94‚îÜ File input = new File(docdownload + doc.getDocfilename());
            ‚ãÆ‚îÜ----------------------------------------
          214‚îÜ File input = filePath.toFile();
            ‚ãÆ‚îÜ----------------------------------------
          239‚îÜ File file = filePath.toFile();
            ‚ãÆ‚îÜ----------------------------------------
          264‚îÜ File file = filePath.toFile();
                                                                                  
  [36m[22m[24m  src/main/java/org/oscarehr/email/admin/ManageEmails2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          146‚îÜ request.getSession().setAttribute("emailAttachmentList", emailAttachmentList);
                                                                               
  [36m[22m[24m  src/main/java/org/oscarehr/er/ReceptionistReport2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          167‚îÜ request.getSession().setAttribute("RxSessionBean", bean);
                                                                              
  [36m[22m[24m  src/main/java/org/oscarehr/eyeform/web/FollowUp2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
          112‚îÜ response.getWriter().print(text);
                                                                              
  [36m[22m[24m  src/main/java/org/oscarehr/eyeform/web/OcularProcPrint.java[0m
    ‚ùØ‚ù± java.lang.security.audit.crlf-injection-logs.crlf-injection-logs
          When data from an untrusted source is put into a logger and not neutralized correctly, an attacker
          could forge log entries or include malicious content.                                             
          Details: https://sg.run/wek0                                                                      
                                                                                                            
           54‚îÜ String startDate = request.getParameter("pStartDate");
           55‚îÜ String endDate = request.getParameter("pEndDate");
           56‚îÜ String demographicNo = request.getParameter("demographicNo");
           57‚îÜ
           58‚îÜ logger.info("startDate = " + startDate);
            ‚ãÆ‚îÜ----------------------------------------
           55‚îÜ String endDate = request.getParameter("pEndDate");
           56‚îÜ String demographicNo = request.getParameter("demographicNo");
           57‚îÜ
           58‚îÜ logger.info("startDate = " + startDate);
           59‚îÜ logger.info("endDate = " + endDate);
            ‚ãÆ‚îÜ----------------------------------------
           56‚îÜ String demographicNo = request.getParameter("demographicNo");
           57‚îÜ
           58‚îÜ logger.info("startDate = " + startDate);
           59‚îÜ logger.info("endDate = " + endDate);
           60‚îÜ logger.info("demographicNo = " + demographicNo);
                                                                                   
  [36m[22m[24m  src/main/java/org/oscarehr/eyeform/web/ProcedureBook2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
          105‚îÜ response.getWriter().print(text);
                                                                                  
  [36m[22m[24m  src/main/java/org/oscarehr/eyeform/web/SpecsHistory2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
          151‚îÜ out.println("setfieldvalue(\"od_manifest_refraction_sph\",\"" + latestSpecs.getOdSph() +
               "\");");                                                                                
            ‚ãÆ‚îÜ----------------------------------------
          152‚îÜ out.println("setfieldvalue(\"os_manifest_refraction_sph\",\"" + latestSpecs.getOsSph() +
               "\");");                                                                                
            ‚ãÆ‚îÜ----------------------------------------
          153‚îÜ out.println("setfieldvalue(\"od_manifest_refraction_cyl\",\"" + latestSpecs.getOdCyl() +
               "\");");                                                                                
            ‚ãÆ‚îÜ----------------------------------------
          154‚îÜ out.println("setfieldvalue(\"os_manifest_refraction_cyl\",\"" + latestSpecs.getOsCyl() +
               "\");");                                                                                
            ‚ãÆ‚îÜ----------------------------------------
          155‚îÜ out.println("setfieldvalue(\"od_manifest_refraction_axis\",\"" + latestSpecs.getOdAxis() +
               "\");");                                                                                  
            ‚ãÆ‚îÜ----------------------------------------
          156‚îÜ out.println("setfieldvalue(\"os_manifest_refraction_axis\",\"" + latestSpecs.getOsAxis() +
               "\");");                                                                                  
                                                                                
  [36m[22m[24m  src/main/java/org/oscarehr/eyeform/web/SpecsHistoryPrint.java[0m
    ‚ùØ‚ù± java.lang.security.audit.crlf-injection-logs.crlf-injection-logs
          When data from an untrusted source is put into a logger and not neutralized correctly, an attacker
          could forge log entries or include malicious content.                                             
          Details: https://sg.run/wek0                                                                      
                                                                                                            
           54‚îÜ String startDate = request.getParameter("pStartDate");
           55‚îÜ String endDate = request.getParameter("pEndDate");
           56‚îÜ String demographicNo = request.getParameter("demographicNo");
           57‚îÜ
           58‚îÜ logger.debug("startDate = " + startDate);
            ‚ãÆ‚îÜ----------------------------------------
           55‚îÜ String endDate = request.getParameter("pEndDate");
           56‚îÜ String demographicNo = request.getParameter("demographicNo");
           57‚îÜ
           58‚îÜ logger.debug("startDate = " + startDate);
           59‚îÜ logger.debug("endDate = " + endDate);
            ‚ãÆ‚îÜ----------------------------------------
           56‚îÜ String demographicNo = request.getParameter("demographicNo");
           57‚îÜ
           58‚îÜ logger.debug("startDate = " + startDate);
           59‚îÜ logger.debug("endDate = " + endDate);
           60‚îÜ logger.debug("demographicNo = " + demographicNo);
                                                                              
  [36m[22m[24m  src/main/java/org/oscarehr/eyeform/web/TestBook2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
          113‚îÜ response.getWriter().print(text);
                                                                        
  [36m[22m[24m  src/main/java/org/oscarehr/fax/action/Fax2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
          180‚îÜ outs.write(data);
                                                                               
  [36m[22m[24m  src/main/java/org/oscarehr/fax/admin/ManageFaxes2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
          230‚îÜ outs.write(data);
                                                                             
  [36m[22m[24m  src/main/java/org/oscarehr/flowsheet/Flowsheet2Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
          569‚îÜ File f =                                                                              
               MeasurementTemplateFlowSheetConfig.getInstance().getFileMap().get(fsuc.getTemplate());
                                                                                               
  [36m[22m[24m  src/main/java/org/oscarehr/hospitalReportManager/HRMDownloadFile2Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
          116‚îÜ File temp = File.createTempFile("HRMDownloadFile", report.getFileExtension());
                                                                                         
  [36m[22m[24m  src/main/java/org/oscarehr/hospitalReportManager/v2018/HRM2Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
          135‚îÜ File file = new File(downloadDirectory, item.getName());
            ‚ãÆ‚îÜ----------------------------------------
          202‚îÜ File file = new File(privateKeyDirectory, item.getName());
                                                                                      
  [36m[22m[24m  src/main/java/org/oscarehr/integration/born/BORNWbXmlGenerator.java[0m
    ‚ùØ‚ù± java.lang.security.audit.crypto.use-of-md5.use-of-md5
          Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use HMAC instead.                         
          Details: https://sg.run/ryJn                                                                   
                                                                                                         
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ "SHA-512"
          2142‚îÜ MessageDigest md = MessageDigest.getInstance("MD5");
                                                                                            
  [36m[22m[24m  src/main/java/org/oscarehr/integration/mcedt/mailbox/Download2Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
          222‚îÜ File document = new File(inboxFolder + File.separator + d.getDescription());
            ‚ãÆ‚îÜ----------------------------------------
          354‚îÜ File document = new File(inboxFolder + File.separator + d.getDescription());
                                                                             
  [36m[22m[24m  src/main/java/org/oscarehr/olis/OLISAddToInbox2Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
           63‚îÜ File file = new File(fileLocation);
            ‚ãÆ‚îÜ----------------------------------------
           68‚îÜ is = new FileInputStream(fileLocation);
                                                                                 
  [36m[22m[24m  src/main/java/org/oscarehr/olis/OLISProtocolSocketFactory.java[0m
    ‚ùØ‚ù± java.lang.security.audit.weak-ssl-context.weak-ssl-context
          An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered
          weak encryption and are deprecated. Use SSLContext.getInstance("TLSv1.2") for the best security.
          Details: https://sg.run/4x7E                                                                    
                                                                                                          
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ SSLContext.getInstance("TLSv1.2")
           66‚îÜ context = SSLContext.getInstance("TLS");
                                                                                       
  [36m[22m[24m  src/main/java/org/oscarehr/olis/OLISUploadSimulationData2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
           69‚îÜ request.getSession().setAttribute("errors", request.getAttribute("errors"));
            ‚ãÆ‚îÜ----------------------------------------
           71‚îÜ request.getSession().setAttribute("olisResponseContent", simulationData);
                                                                                   
  [36m[22m[24m  src/main/java/org/oscarehr/phr/web/PHRUserManagement2Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
          484‚îÜ File patientRegistrationDocument = new File(docDirectory, filename);
            ‚ãÆ‚îÜ----------------------------------------
          485‚îÜ fos = new FileOutputStream(patientRegistrationDocument);
                                                                         
  [36m[22m[24m  src/main/java/org/oscarehr/renal/web/Renal2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          291‚îÜ request.getSession().setAttribute("labReq07" + demographicNo, p);
            ‚ãÆ‚îÜ----------------------------------------
          299‚îÜ request.getSession().setAttribute("labReq10" + demographicNo, p);
                                                                                  
  [36m[22m[24m  src/main/java/org/oscarehr/rx/dispensary/Dispensary2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
          241‚îÜ response.getWriter().print(jsonArray);
            ‚ãÆ‚îÜ----------------------------------------
          256‚îÜ response.getWriter().print(jsonArray);
                                                                               
  [36m[22m[24m  src/main/java/org/oscarehr/survey/web/SurveyTest2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          115‚îÜ request.getSession().setAttribute("validation_file", descr);
            ‚ãÆ‚îÜ----------------------------------------
          132‚îÜ request.getSession().setAttribute("model", model);
                                                                                   
  [36m[22m[24m  src/main/java/org/oscarehr/ui/servlet/ImageRenderingServlet.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
          240‚îÜ fileInputStream = new FileInputStream(tempFilePath);
                                                                       
  [36m[22m[24m  src/main/java/org/oscarehr/util/EncryptionUtils.java[0m
    ‚ùØ‚ù± java.lang.security.audit.crypto.use-of-sha1.use-of-sha1
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or 
          SHA256 or SHA512 for other hash function applications.                                           
          Details: https://sg.run/bXNp                                                                     
                                                                                                           
           58‚îÜ return MessageDigest.getInstance("SHA-1");
   
    ‚ùØ‚ù± java.lang.security.audit.crypto.use-of-default-aes.use-of-default-aes
          Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't     
          provide message confidentiality and is not semantically secure so should not be used. Instead, use a
          strong, secure cipher: java.crypto.Cipher.getInstance("AES/CBC/PKCS7PADDING"). See                  
          https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.       
          Details: https://sg.run/nzKO                                                                        
                                                                                                              
          132‚îÜ Cipher cipher = Cipher.getInstance("AES");
            ‚ãÆ‚îÜ----------------------------------------
          147‚îÜ Cipher cipher = Cipher.getInstance("AES");
                                                                 
  [36m[22m[24m  src/main/java/org/oscarehr/util/MiscUtils.java[0m
    ‚ùØ‚ù± java.lang.security.audit.weak-ssl-context.weak-ssl-context
          An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered
          weak encryption and are deprecated. Use SSLContext.getInstance("TLSv1.2") for the best security.
          Details: https://sg.run/4x7E                                                                    
                                                                                                          
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ SSLContext.getInstance("TLSv1.2")
          237‚îÜ SSLContext ctx = SSLContext.getInstance("TLS");
                                                                
  [36m[22m[24m  src/main/java/org/oscarehr/util/WebUtils.java[0m
    ‚ùØ‚ù± java.lang.security.audit.crlf-injection-logs.crlf-injection-logs
          When data from an untrusted source is put into a logger and not neutralized correctly, an attacker
          could forge log entries or include malicious content.                                             
          Details: https://sg.run/wek0                                                                      
                                                                                                            
           57‚îÜ logger.error(key + '=' + request.getParameter(key));
                                                                
  [36m[22m[24m  src/main/java/org/oscarehr/util/XmlUtils.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-
       disallow-doctype-decl-missing                                                                            
          DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external
          entity attacks. Disable this by setting the feature "http://apache.org/xml/features/disallow-       
          doctype-decl" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities
          declarations. This can be done by setting the features "http://xml.org/sax/features/external-       
          general-entities" and "http://xml.org/sax/features/external-parameter-entities" to false.           
          Details: https://sg.run/PYBz                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              factory.newDocumentBuilder();                                                               
          118‚îÜ DocumentBuilder builder = factory.newDocumentBuilder();
            ‚ãÆ‚îÜ----------------------------------------
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              factory.newDocumentBuilder();                                                               
          125‚îÜ DocumentBuilder builder = factory.newDocumentBuilder();
                                                                           
  [36m[22m[24m  src/main/java/org/oscarehr/web/OcanIarSubmit2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
           54‚îÜ response.getWriter().println(submissionId_full);
            ‚ãÆ‚îÜ----------------------------------------
           62‚îÜ response.getWriter().println(submissionId_self);
            ‚ãÆ‚îÜ----------------------------------------
           70‚îÜ response.getWriter().println(submissionId_core);
                                                                    
  [36m[22m[24m  src/main/java/oscar/DocumentMgtUploadServlet.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
           92‚îÜ File savedFile = new File(foldername, output + fullFile[fullFile.length - 1]);
                                                                 
  [36m[22m[24m  src/main/java/oscar/DocumentUploadServlet.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
           64‚îÜ File providedFile = new File(inboxFolder, providedFilename);
            ‚ãÆ‚îÜ----------------------------------------
           66‚îÜ providedFile = new File(archiveFolder, providedFilename);
            ‚ãÆ‚îÜ----------------------------------------
           89‚îÜ File savedFile = new File(foldername, fullFile[fullFile.length - 1]);
                                                             
  [36m[22m[24m  src/main/java/oscar/OBChecklist_99_12.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-
       decl-missing                                                                                                  
          DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external      
          entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-       
          doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities
          declarations. This can be done by setting the features `http://xml.org/sax/features/external-       
          general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The
          previous links are not meant to be clicked. They are the literal config key values that are supposed
          to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-     
          sheets/java-xxe/#3a-documentbuilderfactory.                                                         
          Details: https://sg.run/Gj32                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              factory.newSAXParser();                                                                     
           54‚îÜ SAXParser saxParser = factory.newSAXParser();
                                                         
  [36m[22m[24m  src/main/java/oscar/OBRisks_99_12.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-
       decl-missing                                                                                                  
          DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external      
          entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-       
          doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities
          declarations. This can be done by setting the features `http://xml.org/sax/features/external-       
          general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The
          previous links are not meant to be clicked. They are the literal config key values that are supposed
          to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-     
          sheets/java-xxe/#3a-documentbuilderfactory.                                                         
          Details: https://sg.run/Gj32                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              factory.newSAXParser();                                                                     
           46‚îÜ SAXParser saxParser = factory.newSAXParser();
            ‚ãÆ‚îÜ----------------------------------------
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              factory.newSAXParser();                                                                     
           68‚îÜ SAXParser saxParser = factory.newSAXParser();
                                                         
  [36m[22m[24m  src/main/java/oscar/OscarPingTalk.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-
       disallow-doctype-decl-missing                                                                            
          DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external
          entity attacks. Disable this by setting the feature "http://apache.org/xml/features/disallow-       
          doctype-decl" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities
          declarations. This can be done by setting the features "http://xml.org/sax/features/external-       
          general-entities" and "http://xml.org/sax/features/external-parameter-entities" to false.           
          Details: https://sg.run/PYBz                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              dbf.newDocumentBuilder();                                                               
          144‚îÜ DocumentBuilder db = dbf.newDocumentBuilder();
                                                         
  [36m[22m[24m  src/main/java/oscar/appt/ApptUtil.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
           62‚îÜ request.getSession().setAttribute(SESSION_APPT_BEAN, obj);
                                                                                    
  [36m[22m[24m  src/main/java/oscar/decision/DesAnnualReviewPlannerChecklist.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-
       decl-missing                                                                                                  
          DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external      
          entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-       
          doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities
          declarations. This can be done by setting the features `http://xml.org/sax/features/external-       
          general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The
          previous links are not meant to be clicked. They are the literal config key values that are supposed
          to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-     
          sheets/java-xxe/#3a-documentbuilderfactory.                                                         
          Details: https://sg.run/Gj32                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              factory.newSAXParser();                                                                     
           47‚îÜ SAXParser saxParser = factory.newSAXParser();
            ‚ãÆ‚îÜ----------------------------------------
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              factory.newSAXParser();                                                                     
           67‚îÜ SAXParser saxParser = factory.newSAXParser();
                                                                               
  [36m[22m[24m  src/main/java/oscar/decision/DesAnnualReviewPlannerRisk.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-
       decl-missing                                                                                                  
          DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external      
          entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-       
          doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities
          declarations. This can be done by setting the features `http://xml.org/sax/features/external-       
          general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The
          previous links are not meant to be clicked. They are the literal config key values that are supposed
          to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-     
          sheets/java-xxe/#3a-documentbuilderfactory.                                                         
          Details: https://sg.run/Gj32                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              factory.newSAXParser();                                                                     
           47‚îÜ SAXParser saxParser = factory.newSAXParser();
            ‚ãÆ‚îÜ----------------------------------------
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              factory.newSAXParser();                                                                     
           67‚îÜ SAXParser saxParser = factory.newSAXParser();
                                                                                       
  [36m[22m[24m  src/main/java/oscar/decision/DesAntenatalPlannerChecklist_99_12.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-
       decl-missing                                                                                                  
          DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external      
          entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-       
          doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities
          declarations. This can be done by setting the features `http://xml.org/sax/features/external-       
          general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The
          previous links are not meant to be clicked. They are the literal config key values that are supposed
          to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-     
          sheets/java-xxe/#3a-documentbuilderfactory.                                                         
          Details: https://sg.run/Gj32                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              factory.newSAXParser();                                                                     
           54‚îÜ SAXParser saxParser = factory.newSAXParser();
                                                                                   
  [36m[22m[24m  src/main/java/oscar/decision/DesAntenatalPlannerRisks_99_12.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-
       decl-missing                                                                                                  
          DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external      
          entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-       
          doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities
          declarations. This can be done by setting the features `http://xml.org/sax/features/external-       
          general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The
          previous links are not meant to be clicked. They are the literal config key values that are supposed
          to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-     
          sheets/java-xxe/#3a-documentbuilderfactory.                                                         
          Details: https://sg.run/Gj32                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              factory.newSAXParser();                                                                     
           46‚îÜ SAXParser saxParser = factory.newSAXParser();
            ‚ãÆ‚îÜ----------------------------------------
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              factory.newSAXParser();                                                                     
           68‚îÜ SAXParser saxParser = factory.newSAXParser();
                                                                         
  [36m[22m[24m  src/main/java/oscar/eform/actions/DelImage2Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
           58‚îÜ File image = new File(imgpath + "/" + imgname);
                                                                             
  [36m[22m[24m  src/main/java/oscar/eform/actions/DisplayImage2Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
           69‚îÜ file = new File(directory, fileName);
                                                                    
  [36m[22m[24m  src/main/java/oscar/eform/upload/UploadImage.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
           80‚îÜ File savedFile = new File(foldername, fullFile[fullFile.length - 1]);
                                                                                       
  [36m[22m[24m  src/main/java/oscar/eform/util/EFormViewForPdfGenerationServlet.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
           95‚îÜ response.getOutputStream().write(eForm.getFormHtml().getBytes(Charset.forName("UTF-8")));
                                                                      
  [36m[22m[24m  src/main/java/oscar/form/FrmONAREnhancedRecord.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.formatted-sql-string.formatted-sql-string
          Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the
          SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement)    
          instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.                    
          Details: https://sg.run/OPXp                                                                        
                                                                                                              
          247‚îÜ preparedStmt.executeUpdate();
                                                                                 
  [36m[22m[24m  src/main/java/oscar/form/pdfservlet/FrmCustomedPDFServlet.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
          169‚îÜ writer.println("<div id='fax-success' style='color:green;'><h3>Fax successfully
               generated</h3><p>" + pharmaName + " (" + faxNo + ")</p></div>");               
   
    ‚ùØ‚ù± java.lang.security.audit.crlf-injection-logs.crlf-injection-logs
          When data from an untrusted source is put into a logger and not neutralized correctly, an attacker
          could forge log entries or include malicious content.                                             
          Details: https://sg.run/wek0                                                                      
                                                                                                            
          576‚îÜ String method = req.getParameter("__method");
          577‚îÜ String origPrintDate = null;
          578‚îÜ String numPrint = null;
          579‚îÜ if ("true".equals(req.getParameter("rxReprint"))) {
          580‚îÜ     origPrintDate = req.getParameter("origPrintDate");
          581‚îÜ     numPrint = req.getParameter("numPrints");
          582‚îÜ }
          583‚îÜ
          584‚îÜ logger.debug("method in generatePDFDocumentBytes " + method);
            ‚ãÆ‚îÜ----------------------------------------
          589‚îÜ String useSatelliteClinic = req.getParameter("useSC");
          590‚îÜ logger.debug(useSatelliteClinic);
            ‚ãÆ‚îÜ----------------------------------------
          592‚îÜ String scAddress = req.getParameter("scAddress");
          593‚îÜ logger.debug("clinic detail" + "=" + scAddress);
                                                                   
  [36m[22m[24m  src/main/java/oscar/form/study/HSFO/HSFODAO.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.formatted-sql-string.formatted-sql-string
          Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the
          SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement)    
          instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.                    
          Details: https://sg.run/OPXp                                                                        
                                                                                                              
          613‚îÜ result = sql.executeQuery(query);
            ‚ãÆ‚îÜ----------------------------------------
          690‚îÜ result = sql.executeQuery(query);
            ‚ãÆ‚îÜ----------------------------------------
          880‚îÜ ResultSet result = sql.executeQuery(query);
            ‚ãÆ‚îÜ----------------------------------------
          895‚îÜ ResultSet result = sql.executeQuery(query2);
            ‚ãÆ‚îÜ----------------------------------------
          1231‚îÜ result = sql.executeQuery(query);
                                                                                      
  [36m[22m[24m  src/main/java/oscar/form/study/HSFO/pageUtil/ManageHSFO2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          277‚îÜ request.getSession().setAttribute("HSFOBPCHART", chart1);
            ‚ãÆ‚îÜ----------------------------------------
          282‚îÜ request.getSession().setAttribute("HSFOBBMICHART", chart2);
            ‚ãÆ‚îÜ----------------------------------------
          286‚îÜ request.getSession().setAttribute("HSFOWAISTCHART", chart3);
            ‚ãÆ‚îÜ----------------------------------------
          291‚îÜ request.getSession().setAttribute("HSFODLCHART", chart4);
            ‚ãÆ‚îÜ----------------------------------------
          296‚îÜ request.getSession().setAttribute("HSFOimportanceconfidenceCHART", chart5);
                                                              
  [36m[22m[24m  src/main/java/oscar/login/Login2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          209‚îÜ request.getSession().setAttribute(SessionConstants.CURRENT_FACILITY, facility);
            ‚ãÆ‚îÜ----------------------------------------
          214‚îÜ OcanForm.getOcanWarningMessage(facility.getId()));
                                                                     
  [36m[22m[24m  src/main/java/oscar/login/LoginResourceAction.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
           66‚îÜ image = new File(images, URLDecoder.decode(logoImage, "UTF-8"));
                                                                                                
  [36m[22m[24m  src/main/java/oscar/oscarBilling/MSP/DocumentTeleplanReportUploadServlet.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
           70‚îÜ File pFile = new File(userHomePath, backupfilepath + ".properties");
            ‚ãÆ‚îÜ----------------------------------------
           74‚îÜ FileInputStream pStream = new FileInputStream(pFile.getPath());
                                                                                                      
  [36m[22m[24m  src/main/java/oscar/oscarBilling/ca/bc/MSP/DocumentTeleplanReportUploadServlet.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
           98‚îÜ File savedFile = new File(foldername, fullFile[fullFile.length - 1]);
                                                                               
  [36m[22m[24m  src/main/java/oscar/oscarBilling/ca/bc/MSP/GenTa2Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
           97‚îÜ FileInputStream file = new FileInputStream(filepath + filename);
                                                                                    
  [36m[22m[24m  src/main/java/oscar/oscarBilling/ca/bc/data/BillingmasterDAO.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.formatted-sql-string.formatted-sql-string
          Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the
          SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement)    
          instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.                    
          Details: https://sg.run/OPXp                                                                        
                                                                                                              
          247‚îÜ Query query = entityManager.createNativeQuery(p);
                                                                                      
  [36m[22m[24m  src/main/java/oscar/oscarBilling/ca/bc/pageUtil/Billing2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
           96‚îÜ request.getSession().setAttribute("billingSessionBean", bean);
                                                                                              
  [36m[22m[24m  src/main/java/oscar/oscarBilling/ca/bc/pageUtil/BillingEditCode2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
           78‚îÜ response.getOutputStream().write(jsonObject.toString().getBytes());
                                                                                             
  [36m[22m[24m  src/main/java/oscar/oscarBilling/ca/bc/pageUtil/ManageTeleplan2Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
          357‚îÜ File f = new File(datacenter, filename);
            ‚ãÆ‚îÜ----------------------------------------
          492‚îÜ File file = tr.getFile();
                                                                                       
  [36m[22m[24m  src/main/java/oscar/oscarDemographic/PrintDemoChartLabel2Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
          120‚îÜ ins = new FileInputStream(System.getProperty("user.home") + File.separator + labelFile);
                                                                                              
  [36m[22m[24m  src/main/java/oscar/oscarDemographic/pageUtil/CihiExportPHC_VRS2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.crypto.use-of-md5.use-of-md5
          Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use HMAC instead.                         
          Details: https://sg.run/ryJn                                                                   
                                                                                                         
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ "SHA-512"
          398‚îÜ digest = MessageDigest.getInstance("MD5");
                                                                                                     
  [36m[22m[24m  src/main/java/oscar/oscarDemographic/pageUtil/DemographicExportAction42Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-
       disallow-doctype-decl-missing                                                                            
          DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external
          entity attacks. Disable this by setting the feature "http://apache.org/xml/features/disallow-       
          doctype-decl" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities
          declarations. This can be done by setting the features "http://xml.org/sax/features/external-       
          general-entities" and "http://xml.org/sax/features/external-parameter-entities" to false.           
          Details: https://sg.run/PYBz                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              factory.newDocumentBuilder();                                                               
          3469‚îÜ builder = factory.newDocumentBuilder();
                                                                                              
  [36m[22m[24m  src/main/java/oscar/oscarDemographic/pageUtil/ImportLogDownload2Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
           54‚îÜ File importLogFile = new File(importLog);
            ‚ãÆ‚îÜ----------------------------------------
           55‚îÜ InputStream in = new FileInputStream(importLog);
   
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
           63‚îÜ while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
                                                                           
  [36m[22m[24m  src/main/java/oscar/oscarEncounter/data/EctFormData.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.formatted-sql-string.formatted-sql-string
          Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the
          SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement)    
          instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.                    
          Details: https://sg.run/OPXp                                                                        
                                                                                                              
          148‚îÜ ResultSet rs = s.executeQuery(sql);
            ‚ãÆ‚îÜ----------------------------------------
          158‚îÜ ResultSet rs = s.executeQuery(sql);
            ‚ãÆ‚îÜ----------------------------------------
          207‚îÜ ResultSet rs = s.executeQuery(sql);
            ‚ãÆ‚îÜ----------------------------------------
          221‚îÜ ResultSet rs = s.executeQuery(sql);
                                                                                               
  [36m[22m[24m  src/main/java/oscar/oscarEncounter/oceanEReferal/pageUtil/ERefer2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
           57‚îÜ writer.write(eReferAttachment.getId().toString());
                                                                                                                        
  [36m[22m[24m                                                                                                          
  src/main/java/oscar/oscarEncounter/oscarConsultationRequest/pageUtil/ConsultationAttachDocs2Action.java[0m            
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
          201‚îÜ File tempLabPDF = File.createTempFile("lab" + segmentID, "pdf");
            ‚ãÆ‚îÜ----------------------------------------
          203‚îÜ FileOutputStream fileOutputStream = new FileOutputStream(tempLabPDF);
                                                                                                                        
  [36m[22m[24m                                                                                                          
  src/main/java/oscar/oscarEncounter/oscarConsultationRequest/pageUtil/EctConsultationFormRequestPrintAction22Action.jav
  [0m                                                                                                                   
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
          155‚îÜ File tempLabPDF = File.createTempFile("lab" + labs.get(i).segmentID, "pdf");
            ‚ãÆ‚îÜ----------------------------------------
          159‚îÜ FileOutputStream fileOutputStream = new FileOutputStream(tempLabPDF);
                                                                                                              
  [36m[22m[24m  src/main/java/oscar/oscarEncounter/oscarMeasurements/hl7/MeasurementHL7Uploader2Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
          228‚îÜ File file = new File(filePath);
                                                                                                                   
  [36m[22m[24m  src/main/java/oscar/oscarEncounter/oscarMeasurements/pageUtil/EctAddShortMeasurement2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
           79‚îÜ response.getWriter().print("id=" + id + "&followupValue=" + followUpValue + "&Date=" +
               UtilDateUtilities.DateToString(new Date()));                                          
                                                                                    
  [36m[22m[24m  src/main/java/oscar/oscarEncounter/pageUtil/EctDisplayAction.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          146‚îÜ request.getSession().setAttribute("EctSessionBean", bean);
                                                                                               
  [36m[22m[24m  src/main/java/oscar/oscarEncounter/pageUtil/EctIncomingEncounter2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          145‚îÜ request.getSession().setAttribute("EctSessionBean", bean);
            ‚ãÆ‚îÜ----------------------------------------
          246‚îÜ request.getSession().setAttribute("EctSessionBean", bean);
                                                                                           
  [36m[22m[24m  src/main/java/oscar/oscarEncounter/pageUtil/EctSaveEncounter2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          305‚îÜ httpservletrequest.getSession().setAttribute("billingSessionBean", bean);
                                                                                                           
  [36m[22m[24m  src/main/java/oscar/oscarLab/ca/all/pageUtil/DownloadEmbeddedDocumentFromLab2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
           79‚îÜ output.write(decodedData);
                                                                                     
  [36m[22m[24m  src/main/java/oscar/oscarLab/ca/all/pageUtil/LabUpload2Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
          104‚îÜ File file = new File(filePath);
            ‚ãÆ‚îÜ----------------------------------------
          125‚îÜ is = new FileInputStream(file);
   
    ‚ùØ‚ù± java.lang.security.audit.crypto.ecb-cipher.ecb-cipher
          Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which
          allows an attacker to intercept and replay the data. Further, ECB mode does not provide any         
          integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.                  
          Details: https://sg.run/Ro9K                                                                        
                                                                                                              
          181‚îÜ Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
   
    ‚ùØ‚ù± java.lang.security.audit.crypto.use-of-default-aes.use-of-default-aes
          Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't     
          provide message confidentiality and is not semantically secure so should not be used. Instead, use a
          strong, secure cipher: java.crypto.Cipher.getInstance("AES/CBC/PKCS7PADDING"). See                  
          https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.       
          Details: https://sg.run/nzKO                                                                        
                                                                                                              
          187‚îÜ Cipher msgCipher = Cipher.getInstance("AES");
                                                                                     
  [36m[22m[24m  src/main/java/oscar/oscarLab/ca/all/pageUtil/PrintLabs2Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
           87‚îÜ File f = File.createTempFile("lab" + request.getParameter("segmentID"), "pdf");
            ‚ãÆ‚îÜ----------------------------------------
           88‚îÜ FileOutputStream fos = new FileOutputStream(f);
                                                                                  
  [36m[22m[24m  src/main/java/oscar/oscarLab/ca/all/upload/MessageUploader.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.formatted-sql-string.formatted-sql-string
          Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the
          SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement)    
          instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.                    
          Details: https://sg.run/OPXp                                                                        
                                                                                                              
          414‚îÜ ResultSet rs = pstmt.executeQuery();
            ‚ãÆ‚îÜ----------------------------------------
          491‚îÜ ResultSet rs = pstmt.executeQuery();
            ‚ãÆ‚îÜ----------------------------------------
          567‚îÜ ResultSet rs = pstmt.executeQuery();
            ‚ãÆ‚îÜ----------------------------------------
          693‚îÜ ResultSet rs = pstmt.executeQuery();
                                                                                          
  [36m[22m[24m  src/main/java/oscar/oscarLab/ca/all/upload/handlers/DefaultHandler.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-
       disallow-doctype-decl-missing                                                                            
          DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external
          entity attacks. Disable this by setting the feature "http://apache.org/xml/features/disallow-       
          doctype-decl" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities
          declarations. This can be done by setting the features "http://xml.org/sax/features/external-       
          general-entities" and "http://xml.org/sax/features/external-parameter-entities" to false.           
          Details: https://sg.run/PYBz                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              factory.newDocumentBuilder();                                                               
          113‚îÜ Document doc = factory.newDocumentBuilder().parse(new FileInputStream(fileName));
                                                                                                    
  [36m[22m[24m  src/main/java/oscar/oscarLab/ca/all/upload/handlers/ExcellerisOntarioHandler.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-
       disallow-doctype-decl-missing                                                                            
          DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external
          entity attacks. Disable this by setting the feature "http://apache.org/xml/features/disallow-       
          doctype-decl" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities
          declarations. This can be done by setting the features "http://xml.org/sax/features/external-       
          general-entities" and "http://xml.org/sax/features/external-parameter-entities" to false.           
          Details: https://sg.run/PYBz                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ docFactory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              docFactory.newDocumentBuilder();                                                               
           52‚îÜ DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
                                                                                      
  [36m[22m[24m  src/main/java/oscar/oscarLab/ca/all/upload/handlers/IHAHandler.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-
       disallow-doctype-decl-missing                                                                            
          DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external
          entity attacks. Disable this by setting the feature "http://apache.org/xml/features/disallow-       
          doctype-decl" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities
          declarations. This can be done by setting the features "http://xml.org/sax/features/external-       
          general-entities" and "http://xml.org/sax/features/external-parameter-entities" to false.           
          Details: https://sg.run/PYBz                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              factory.newDocumentBuilder();                                                               
          193‚îÜ Document doc = factory.newDocumentBuilder().parse(new FileInputStream(fileName));
                                                                                         
  [36m[22m[24m  src/main/java/oscar/oscarLab/ca/all/upload/handlers/IHAPOIHandler.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-
       disallow-doctype-decl-missing                                                                            
          DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external
          entity attacks. Disable this by setting the feature "http://apache.org/xml/features/disallow-       
          doctype-decl" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities
          declarations. This can be done by setting the features "http://xml.org/sax/features/external-       
          general-entities" and "http://xml.org/sax/features/external-parameter-entities" to false.           
          Details: https://sg.run/PYBz                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ docFactory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              docFactory.newDocumentBuilder();                                                               
          170‚îÜ DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
                                                                                           
  [36m[22m[24m  src/main/java/oscar/oscarLab/ca/all/upload/handlers/MEDITECHHandler.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-
       disallow-doctype-decl-missing                                                                            
          DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external
          entity attacks. Disable this by setting the feature "http://apache.org/xml/features/disallow-       
          doctype-decl" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities
          declarations. This can be done by setting the features "http://xml.org/sax/features/external-       
          general-entities" and "http://xml.org/sax/features/external-parameter-entities" to false.           
          Details: https://sg.run/PYBz                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ docFactory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              docFactory.newDocumentBuilder();                                                               
          136‚îÜ DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
                                                                                         
  [36m[22m[24m  src/main/java/oscar/oscarLab/ca/all/upload/handlers/PATHL7Handler.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-
       disallow-doctype-decl-missing                                                                            
          DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external
          entity attacks. Disable this by setting the feature "http://apache.org/xml/features/disallow-       
          doctype-decl" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities
          declarations. This can be done by setting the features "http://xml.org/sax/features/external-       
          general-entities" and "http://xml.org/sax/features/external-parameter-entities" to false.           
          Details: https://sg.run/PYBz                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ docFactory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              docFactory.newDocumentBuilder();                                                               
           62‚îÜ DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
                                                                           
  [36m[22m[24m  src/main/java/oscar/oscarLab/ca/all/util/KeyPairGen.java[0m
    ‚ùØ‚ù± java.lang.security.audit.crypto.weak-rsa.use-of-weak-rsa-key
          RSA keys should be at least 2048 bits based on NIST recommendation.
          Details: https://sg.run/4x6x                                       
                                                                             
           63‚îÜ KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
           64‚îÜ keyGen.initialize(1024);
                                                                                      
  [36m[22m[24m  src/main/java/oscar/oscarLab/ca/all/web/SubmitLabByForm2Action.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
          Detected a potential path traversal. A malicious actor could control the location of this file, to
          include going backwards in the directory with '../'. To address this, ensure that user-controlled 
          variables in file paths are sanitized. You may also consider using a utility method such as       
          org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.    
          Details: https://sg.run/oxXN                                                                      
                                                                                                            
          165‚îÜ File file = new File(filePath);
            ‚ãÆ‚îÜ----------------------------------------
          167‚îÜ FileInputStream fis = new FileInputStream(filePath);
                                                                                      
  [36m[22m[24m  src/main/java/oscar/oscarLab/ca/bc/PathNet/Communication/HTTPS.java[0m
    ‚ùØ‚ù± java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket
          Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an
          attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or     
          'SSLServerSocketFactory' instead.                                                                
          Details: https://sg.run/W8zA                                                                     
                                                                                                           
           50‚îÜ this.socket = new Socket(this.url, 80);
                                                                             
  [36m[22m[24m  src/main/java/oscar/oscarLab/ca/bc/PathNet/Connection.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-
       disallow-doctype-decl-missing                                                                            
          DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external
          entity attacks. Disable this by setting the feature "http://apache.org/xml/features/disallow-       
          doctype-decl" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities
          declarations. This can be done by setting the features "http://xml.org/sax/features/external-       
          general-entities" and "http://xml.org/sax/features/external-parameter-entities" to false.           
          Details: https://sg.run/PYBz                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              factory.newDocumentBuilder();                                                               
          149‚îÜ DocumentBuilder builder = factory.newDocumentBuilder();
                                                                         
  [36m[22m[24m  src/main/java/oscar/oscarLab/ca/on/CML/ABCDParser.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.formatted-sql-string.formatted-sql-string
          Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the
          SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement)    
          instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.                    
          Details: https://sg.run/OPXp                                                                        
                                                                                                              
          172‚îÜ ResultSet rs = pstmt.executeQuery();
                                                                      
  [36m[22m[24m  src/main/java/oscar/oscarMDS/data/CategoryData.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.formatted-sql-string.formatted-sql-string
          Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the
          SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement)    
          instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.                    
          Details: https://sg.run/OPXp                                                                        
                                                                                                              
          379‚îÜ ResultSet rs = ps.executeQuery(sql);
                                                                                
  [36m[22m[24m  src/main/java/oscar/oscarMDS/pageUtil/ReportMacro2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.crlf-injection-logs.crlf-injection-logs
          When data from an untrusted source is put into a logger and not neutralized correctly, an attacker
          could forge log entries or include malicious content.                                             
          Details: https://sg.run/wek0                                                                      
                                                                                                            
          115‚îÜ String segmentID = request.getParameter("segmentID");
          116‚îÜ String providerNo = request.getParameter("providerNo");
          117‚îÜ String labType = request.getParameter("labType");
          118‚îÜ String demographicNo = request.getParameter("demographicNo");
          119‚îÜ
          120‚îÜ if (macro.has("acknowledge")) {
          121‚îÜ     logger.info("Acknowledging lab " + labType + ":" + segmentID);
          122‚îÜ     JSONObject jAck = macro.getJSONObject("acknowledge");
          123‚îÜ     String comment = jAck.getString("comment");
          124‚îÜ     CommonLabResultData.updateReportStatus(Integer.parseInt(segmentID), providerNo, 'A',
               comment, labType,                                                                       
               skipComment(LoggedInInfo.getLoggedInInfoFromSession(request).getLoggedInProviderNo())); 
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
          117‚îÜ String labType = request.getParameter("labType");
          118‚îÜ String demographicNo = request.getParameter("demographicNo");
          119‚îÜ
          120‚îÜ if (macro.has("acknowledge")) {
          121‚îÜ     logger.info("Acknowledging lab " + labType + ":" + segmentID);
          122‚îÜ     JSONObject jAck = macro.getJSONObject("acknowledge");
          123‚îÜ     String comment = jAck.getString("comment");
          124‚îÜ     CommonLabResultData.updateReportStatus(Integer.parseInt(segmentID), providerNo, 'A',
               comment, labType,                                                                       
               skipComment(LoggedInInfo.getLoggedInInfoFromSession(request).getLoggedInProviderNo())); 
          125‚îÜ }
                                                                                                        
  [36m[22m[24m  src/main/java/oscar/oscarMessenger/pageUtil/MsgDisplayDemographicMessages2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
           87‚îÜ request.getSession().setAttribute("msgSessionBean", bean);
                                                                                             
  [36m[22m[24m  src/main/java/oscar/oscarMessenger/pageUtil/MsgDisplayMessages2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
           73‚îÜ request.getSession().setAttribute("msgSessionBean", bean);
            ‚ãÆ‚îÜ----------------------------------------
           83‚îÜ request.getSession().setAttribute("msgSessionBean", bean);
                                                                                      
  [36m[22m[24m  src/main/java/oscar/oscarReport/pageUtil/RptDownloadCSVServlet.java[0m
    ‚ùØ‚ù± java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request
          Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL
          injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL      
          queries or properly sanitize user input instead.                                                   
          Details: https://sg.run/Lg56                                                                       
                                                                                                             
          471‚îÜ vecFieldValue = (new RptReportCreator()).query(sql, vecFieldName);
            ‚ãÆ‚îÜ----------------------------------------
          510‚îÜ vecFieldValue = (new RptReportCreator()).query(sql, vecFieldName);
            ‚ãÆ‚îÜ----------------------------------------
          592‚îÜ vecFieldValue = (new RptReportCreator()).query(sql, vecFieldName);
                                                                                                        
  [36m[22m[24m  src/main/java/oscar/oscarReport/reportByTemplate/actions/GenerateOutFiles2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
           69‚îÜ response.getWriter().write(csv);
                                                                                 
  [36m[22m[24m  src/main/java/oscar/oscarRx/pageUtil/RxRePrescribe2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          143‚îÜ request.getSession().setAttribute("tmpBeanRX", beanRX);
            ‚ãÆ‚îÜ----------------------------------------
          145‚îÜ request.getSession().setAttribute("comment", comment);
                                                                                 
  [36m[22m[24m  src/main/java/oscar/oscarRx/pageUtil/RxShowAllergy2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
          117‚îÜ request.getSession().setAttribute("RxSessionBean", bean);
            ‚ãÆ‚îÜ----------------------------------------
          130‚îÜ request.getSession().setAttribute("Patient", patient);
                                                                                      
  [36m[22m[24m  src/main/java/oscar/oscarSurveillance/CheckSurveillance2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
          Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User    
          input into such a command could lead to an attacker inputting malicious code into your session      
          parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust
          boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly   
          sanitize user input before passing it into such function calls.                                     
          Details: https://sg.run/QbDZ                                                                        
                                                                                                              
           74‚îÜ request.getSession().setAttribute("case_program_id", programId);
                                                                  
  [36m[22m[24m  src/main/java/oscar/scratch/Scratch2Action.java[0m
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
          104‚îÜ response.getWriter().print("id=" + URLEncoder.encode(returnId, "utf-8") + "&text=" +
               URLEncoder.encode(returnText, "utf-8") + "&windowId=" + URLEncoder.encode(windowId, 
               "utf-8"));                                                                          
                                                         
  [36m[22m[24m  src/main/java/oscar/util/JDBCUtil.java[0m
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-
       disallow-doctype-decl-missing                                                                            
          DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external
          entity attacks. Disable this by setting the feature "http://apache.org/xml/features/disallow-       
          doctype-decl" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities
          declarations. This can be done by setting the features "http://xml.org/sax/features/external-       
          general-entities" and "http://xml.org/sax/features/external-parameter-entities" to false.           
          Details: https://sg.run/PYBz                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
              factory.newDocumentBuilder();                                                               
           58‚îÜ DocumentBuilder builder = factory.newDocumentBuilder();
   
   ‚ùØ‚ùØ‚ù± java.lang.security.audit.xxe.transformerfactory-dtds-not-disabled.transformerfactory-dtds-not-disabled
          DOCTYPE declarations are enabled for this TransformerFactory. This is vulnerable to XML external
          entity attacks. Disable this by setting the attributes "accessExternalDTD" and                  
          "accessExternalStylesheet" to "".                                                               
          Details: https://sg.run/1wyQ                                                                    
                                                                                                          
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ transFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
              transFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");    
              transFactory.newTransformer(...);                                          
           87‚îÜ Transformer transformer = transFactory.newTransformer();
                                          
  [36m[22m[24m  src/main/webapp/gpl.htm[0m
    ‚ùØ‚ù± html.security.plaintext-http-link.plaintext-http-link
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           55‚îÜ WWW: <a href="http://oscarhome.org/">http://oscarhome.org/</a></p>
                                                         
  [36m[22m[24m  src/main/webapp/lab/CA/BC/lablinks.htm[0m
    ‚ùØ‚ù± html.security.plaintext-http-link.plaintext-http-link
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           35‚îÜ <li>CML: <a                                                                               
               href="http://www.canmedlab.com/physhome.asp">http://www.canmedlab.com/physhome.asp</a><br>
                                                   
  [36m[22m[24m  src/main/webapp/lab/lablinks.htm[0m
    ‚ùØ‚ù± html.security.plaintext-http-link.plaintext-http-link
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           60‚îÜ <li>CML: <a                                                                               
               href="http://www.canmedlab.com/physhome.asp">http://www.canmedlab.com/physhome.asp</a><br>
                                                              
  [36m[22m[24m  src/main/webapp/share/calendar/dayinfo.html[0m
    ‚ùØ‚ù± html.security.plaintext-http-link.plaintext-http-link
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
          117‚îÜ <address><a href="http://dynarch.com/mishoo/">mishoo</a></address>
                                                                         
  [36m[22m[24m  src/main/webapp/share/calendar/doc/html/reference.html[0m
    ‚ùØ‚ù± html.security.plaintext-http-link.plaintext-http-link
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           50‚îÜ &copy; Dynarch.com 2002-2005, <a                           
               href="http://www.dynarch.com/"><tt>www.dynarch.com</tt></a>
            ‚ãÆ‚îÜ----------------------------------------
          182‚îÜ <a                                                                                         
               href="http://www.dynarch.com/projects/calendar/"><tt>www.dynarch.com/projects/calendar</tt>
               </a>                                                                                       
            ‚ãÆ‚îÜ----------------------------------------
          250‚îÜ <a href="http://www.dynarch.com/"><tt>www.dynarch.com</tt></a>
            ‚ãÆ‚îÜ----------------------------------------
          258‚îÜ <a href="http://www.gnu.org/licenses/lgpl.html">GNU Lesser General Public License</a>.</p>
            ‚ãÆ‚îÜ----------------------------------------
          1857‚îÜ <li><p>Sunny Chowdhury (<a href="http://www.ex3.com">www.ex3.com</a>)</p>
            ‚ãÆ‚îÜ----------------------------------------
          1860‚îÜ <li><p>Ian Barrack (<a href="http://www.simban.com">www.simban.com</a>)</p>
            ‚ãÆ‚îÜ----------------------------------------
          1866‚îÜ <li><p>Seyhan Ersoy (<a href="http://www.oocgi.com">www.oocgi.com</a>)</p>
            ‚ãÆ‚îÜ----------------------------------------
          1869‚îÜ <li><p>Jon Stokkeland (<a href="http://www.sauen.com">www.sauen.com</a>)</p>
            ‚ãÆ‚îÜ----------------------------------------
          1914‚îÜ <div align=right class=advertisement>HTML conversion by <a
          1915‚îÜ         href="http://www.ccs.neu.edu/~dorai/tex2page/tex2page-doc.html">TeX2page
               20050501</a></div>                                                               
                                                            
  [36m[22m[24m  src/main/webapp/share/calendar/index.html[0m
    ‚ùØ‚ù± html.security.plaintext-http-link.plaintext-http-link
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
          204‚îÜ <h2><a href="http://www.dynarch.com/projects/calendar/"
          205‚îÜ        title="Visit the project website">jscalendar</a>-1.0
            ‚ãÆ‚îÜ----------------------------------------
          365‚îÜ &copy; <a href="http://www.dynarch.com/">dynarch.com</a> 2002-2005 <br/>
            ‚ãÆ‚îÜ----------------------------------------
          366‚îÜ Author: <a href="http://www.bazon.net/mishoo/">Mihai
          367‚îÜ Bazon</a><br/> Distributed under the <a
            ‚ãÆ‚îÜ----------------------------------------
          367‚îÜ Bazon</a><br/> Distributed under the <a
          368‚îÜ     href="http://www.gnu.org/licenses/lgpl.html">GNU LGPL</a>.
            ‚ãÆ‚îÜ----------------------------------------
          372‚îÜ would love it if you would <a href="http://www.dynarch.com/contact.html">let us
          373‚îÜ     know</a>.</p>
                                                                     
  [36m[22m[24m  src/main/webapp/share/calendar/multiple-dates.html[0m
    ‚ùØ‚ù± html.security.plaintext-http-link.plaintext-http-link
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           80‚îÜ <address><a href="http://dynarch.com/mishoo/">mishoo</a></address>
                                                                    
  [36m[22m[24m  src/main/webapp/share/calendar/release-notes.html[0m
    ‚ùØ‚ù± html.security.plaintext-http-link.plaintext-http-link
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           24‚îÜ <a href="http://www.dynarch.com/projects/calendar/">The Coolest DHTML Calendar</a><br/>
            ‚ãÆ‚îÜ----------------------------------------
           25‚îÜ ¬© <a href="http://www.dynarch.com/">Dynarch.com</a> 2002 and later.
            ‚ãÆ‚îÜ----------------------------------------
           84‚îÜ <a
           85‚îÜ         href="http://www.zapatec.com/website/main/products/prod1/">The
           86‚îÜ     Zapatec Calendar</a>. Zapatec kindly allowed us to
            ‚ãÆ‚îÜ----------------------------------------
          137‚îÜ it should work with other browsers too. Many thanks to <a
          138‚îÜ     href="http://www.ex3.com">Sunny Chowdhury</a> for sponsoring
            ‚ãÆ‚îÜ----------------------------------------
          248‚îÜ <b>scrolling area</b>. <b>Many thanks</b> to Ian Barrack (<a
          249‚îÜ     href="http://www.simban.com">Simban.com</a>) who pointed it up and
            ‚ãÆ‚îÜ----------------------------------------
          381‚îÜ <p>Check <a
          382‚îÜ                                                                                            
               href="http://sourceforge.net/tracker/?atid=544285&group_id=75569&func=browse">SourceForge</
               a>,                                                                                        
            ‚ãÆ‚îÜ----------------------------------------
          422‚îÜ <p>This covers only those bugs that have been reported <a
          423‚îÜ         href="http://sourceforge.net/projects/jscalendar" target="_blank"
          424‚îÜ         title="Project page at SourceForge">at SourceForge</a>.</p>
            ‚ãÆ‚îÜ----------------------------------------
          428‚îÜ <li><a href="http://sourceforge.net/tracker/index.php?func=detail&aid=703238&group_id=75569
               &atid=544285"                                                                              
          429‚îÜ        target="_blank"
          430‚îÜ        title="Go to bug description at sourceforge"><tt>#703,238</tt></a> &mdash; fixed
            ‚ãÆ‚îÜ----------------------------------------
          432‚îÜ <li><a href="http://sourceforge.net/tracker/index.php?func=detail&aid=703814&group_id=75569
               &atid=544285"                                                                              
          433‚îÜ        target="_blank"
          434‚îÜ        title="Go to bug description at sourceforge"><tt>#703,814</tt></a> &mdash; fixed
            ‚ãÆ‚îÜ----------------------------------------
          436‚îÜ <li><a href="http://sourceforge.net/tracker/index.php?func=detail&aid=716777&group_id=75569
               &atid=544285"                                                                              
          437‚îÜ        target="_blank"
          438‚îÜ        title="Go to bug description at sourceforge"><tt>#716,777</tt></a> &mdash; closed
               (was fixed already in                                                                   
            ‚ãÆ‚îÜ----------------------------------------
          441‚îÜ <li><a href="http://sourceforge.net/tracker/index.php?func=detail&aid=723335&group_id=75569
               &atid=544285"                                                                              
          442‚îÜ        target="_blank"
          443‚îÜ        title="Go to bug description at sourceforge"><tt>#723,335</tt></a> &mdash; fixed
            ‚ãÆ‚îÜ----------------------------------------
          445‚îÜ <li><a href="http://sourceforge.net/tracker/index.php?func=detail&aid=715122&group_id=75569
               &atid=544285"                                                                              
          446‚îÜ        target="_blank"
          447‚îÜ        title="Go to bug description at sourceforge"><tt>#715,122</tt></a> &mdash; feature
               request; implemented.                                                                    
            ‚ãÆ‚îÜ----------------------------------------
          449‚îÜ <li><a href="http://sourceforge.net/tracker/index.php?func=detail&aid=721206&group_id=75569
               &atid=544285"                                                                              
          450‚îÜ        target="_blank"
          451‚îÜ        title="Go to bug description at sourceforge"><tt>#721,206</tt></a> &mdash; fixed
               (added "refresh()" function)                                                           
            ‚ãÆ‚îÜ----------------------------------------
          453‚îÜ <li><a href="http://sourceforge.net/tracker/index.php?func=detail&aid=721833&group_id=75569
               &atid=544285"                                                                              
          454‚îÜ        target="_blank"
          455‚îÜ        title="Go to bug description at sourceforge"><tt>#721,833</tt></a> &mdash; fixed
               (bug concerning the "yy"                                                               
            ‚ãÆ‚îÜ----------------------------------------
          459‚îÜ <li><a href="http://sourceforge.net/tracker/index.php?func=detail&aid=721833&group_id=75569
               &atid=544285"                                                                              
          460‚îÜ        target="_blank"
          461‚îÜ        title="Go to bug description at sourceforge"><tt>#721,833</tt></a> &mdash; won't fix
               (we won't set the time                                                                     
            ‚ãÆ‚îÜ----------------------------------------
          469‚îÜ <address><a href="http://dynarch.com/mishoo/">Mihai Bazon</a></address>

